// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/domain/vehiclerepository.go

// Package domain_mock is a generated GoMock package.
package domain_mock

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/namelessvoid/carmgmt/internal/pkg/domain"
	reflect "reflect"
)

// MockVehicleRepository is a mock of VehicleRepository interface
type MockVehicleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleRepositoryMockRecorder
}

// MockVehicleRepositoryMockRecorder is the mock recorder for MockVehicleRepository
type MockVehicleRepositoryMockRecorder struct {
	mock *MockVehicleRepository
}

// NewMockVehicleRepository creates a new mock instance
func NewMockVehicleRepository(ctrl *gomock.Controller) *MockVehicleRepository {
	mock := &MockVehicleRepository{ctrl: ctrl}
	mock.recorder = &MockVehicleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVehicleRepository) EXPECT() *MockVehicleRepositoryMockRecorder {
	return m.recorder
}

// CreateVehicle mocks base method
func (m *MockVehicleRepository) CreateVehicle(vehicle domain.Vehicle) (domain.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVehicle", vehicle)
	ret0, _ := ret[0].(domain.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVehicle indicates an expected call of CreateVehicle
func (mr *MockVehicleRepositoryMockRecorder) CreateVehicle(vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVehicle", reflect.TypeOf((*MockVehicleRepository)(nil).CreateVehicle), vehicle)
}

// GetAllVehicles mocks base method
func (m *MockVehicleRepository) GetAllVehicles() ([]domain.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVehicles")
	ret0, _ := ret[0].([]domain.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVehicles indicates an expected call of GetAllVehicles
func (mr *MockVehicleRepositoryMockRecorder) GetAllVehicles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVehicles", reflect.TypeOf((*MockVehicleRepository)(nil).GetAllVehicles))
}

// GetVehicleByID mocks base method
func (m *MockVehicleRepository) GetVehicleByID(vehicleID int) (domain.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleByID", vehicleID)
	ret0, _ := ret[0].(domain.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleByID indicates an expected call of GetVehicleByID
func (mr *MockVehicleRepositoryMockRecorder) GetVehicleByID(vehicleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleByID", reflect.TypeOf((*MockVehicleRepository)(nil).GetVehicleByID), vehicleID)
}

// CreateRefuelling mocks base method
func (m *MockVehicleRepository) CreateRefuelling(refuelling domain.Refuelling) (domain.Refuelling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefuelling", refuelling)
	ret0, _ := ret[0].(domain.Refuelling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefuelling indicates an expected call of CreateRefuelling
func (mr *MockVehicleRepositoryMockRecorder) CreateRefuelling(refuelling interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefuelling", reflect.TypeOf((*MockVehicleRepository)(nil).CreateRefuelling), refuelling)
}

// GetRefuellingsByVehicleID mocks base method
func (m *MockVehicleRepository) GetRefuellingsByVehicleID(vehicleID int) ([]domain.Refuelling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefuellingsByVehicleID", vehicleID)
	ret0, _ := ret[0].([]domain.Refuelling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefuellingsByVehicleID indicates an expected call of GetRefuellingsByVehicleID
func (mr *MockVehicleRepositoryMockRecorder) GetRefuellingsByVehicleID(vehicleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefuellingsByVehicleID", reflect.TypeOf((*MockVehicleRepository)(nil).GetRefuellingsByVehicleID), vehicleID)
}
