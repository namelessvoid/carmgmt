// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/domain/vehicleservice.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/namelessvoid/carmgmt/internal/pkg/domain"
	reflect "reflect"
)

// MockVehicleService is a mock of VehicleService interface
type MockVehicleService struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleServiceMockRecorder
}

// MockVehicleServiceMockRecorder is the mock recorder for MockVehicleService
type MockVehicleServiceMockRecorder struct {
	mock *MockVehicleService
}

// NewMockVehicleService creates a new mock instance
func NewMockVehicleService(ctrl *gomock.Controller) *MockVehicleService {
	mock := &MockVehicleService{ctrl: ctrl}
	mock.recorder = &MockVehicleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVehicleService) EXPECT() *MockVehicleServiceMockRecorder {
	return m.recorder
}

// CreateVehicle mocks base method
func (m *MockVehicleService) CreateVehicle(name string) (domain.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVehicle", name)
	ret0, _ := ret[0].(domain.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVehicle indicates an expected call of CreateVehicle
func (mr *MockVehicleServiceMockRecorder) CreateVehicle(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVehicle", reflect.TypeOf((*MockVehicleService)(nil).CreateVehicle), name)
}

// GetAllVehicles mocks base method
func (m *MockVehicleService) GetAllVehicles() ([]domain.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVehicles")
	ret0, _ := ret[0].([]domain.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVehicles indicates an expected call of GetAllVehicles
func (mr *MockVehicleServiceMockRecorder) GetAllVehicles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVehicles", reflect.TypeOf((*MockVehicleService)(nil).GetAllVehicles))
}

// GetVehicleByID mocks base method
func (m *MockVehicleService) GetVehicleByID(id int) (domain.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleByID", id)
	ret0, _ := ret[0].(domain.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleByID indicates an expected call of GetVehicleByID
func (mr *MockVehicleServiceMockRecorder) GetVehicleByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleByID", reflect.TypeOf((*MockVehicleService)(nil).GetVehicleByID), id)
}

// CreateRefuelling mocks base method
func (m *MockVehicleService) CreateRefuelling(r domain.Refuelling) (domain.Refuelling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefuelling", r)
	ret0, _ := ret[0].(domain.Refuelling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefuelling indicates an expected call of CreateRefuelling
func (mr *MockVehicleServiceMockRecorder) CreateRefuelling(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefuelling", reflect.TypeOf((*MockVehicleService)(nil).CreateRefuelling), r)
}
