// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/auth/sessionrepository.go

// Package auth_mock is a generated GoMock package.
package auth_mock

import (
	gomock "github.com/golang/mock/gomock"
	auth "github.com/namelessvoid/carmgmt/internal/pkg/auth"
	reflect "reflect"
)

// MockSessionRepository is a mock of SessionRepository interface
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// CreateSession mocks base method
func (m *MockSessionRepository) CreateSession(session auth.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockSessionRepositoryMockRecorder) CreateSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionRepository)(nil).CreateSession), session)
}

// FindSession mocks base method
func (m *MockSessionRepository) FindSession(token string) (auth.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSession", token)
	ret0, _ := ret[0].(auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSession indicates an expected call of FindSession
func (mr *MockSessionRepositoryMockRecorder) FindSession(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSession", reflect.TypeOf((*MockSessionRepository)(nil).FindSession), token)
}
