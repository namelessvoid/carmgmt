// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/auth/authenticator.go

// Package auth_mock is a generated GoMock package.
package auth_mock

import (
	gomock "github.com/golang/mock/gomock"
	auth "github.com/namelessvoid/carmgmt/internal/pkg/auth"
	http "net/http"
	reflect "reflect"
)

// MockAuthenticator is a mock of Authenticator interface
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// LoginViaSession mocks base method
func (m *MockAuthenticator) LoginViaSession(r *http.Request) (auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginViaSession", r)
	ret0, _ := ret[0].(auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginViaSession indicates an expected call of LoginViaSession
func (mr *MockAuthenticatorMockRecorder) LoginViaSession(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginViaSession", reflect.TypeOf((*MockAuthenticator)(nil).LoginViaSession), r)
}

// LoginViaCredentials mocks base method
func (m *MockAuthenticator) LoginViaCredentials(r *http.Request) (auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginViaCredentials", r)
	ret0, _ := ret[0].(auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginViaCredentials indicates an expected call of LoginViaCredentials
func (mr *MockAuthenticatorMockRecorder) LoginViaCredentials(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginViaCredentials", reflect.TypeOf((*MockAuthenticator)(nil).LoginViaCredentials), r)
}

// CreateSession mocks base method
func (m *MockAuthenticator) CreateSession(w http.ResponseWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockAuthenticatorMockRecorder) CreateSession(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthenticator)(nil).CreateSession), w)
}

// VerifyToken mocks base method
func (m *MockAuthenticator) VerifyToken(r *http.Request) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", r)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyToken indicates an expected call of VerifyToken
func (mr *MockAuthenticatorMockRecorder) VerifyToken(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthenticator)(nil).VerifyToken), r)
}
